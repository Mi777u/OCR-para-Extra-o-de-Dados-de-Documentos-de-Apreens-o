import cv2
import pytesseract
from PIL import Image
import re
import json
import os

# Se você não tiver o Tesseract instalado, instale-o primeiro:
# Em sistemas Linux: sudo apt install tesseract-ocr
# Em sistemas Windows, baixe e instale o Tesseract em: https://github.com/tesseract-ocr/tesseract
# Configure o caminho do Tesseract para o seu sistema:
# No Linux, geralmente é '/usr/bin/tesseract'
# No Windows, você pode precisar indicar o caminho completo, como:
# pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# Configuração do caminho do Tesseract (no Windows pode ser necessário definir o caminho completo)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'  # Exemplo para Windows

# Função para melhorar a qualidade da imagem
def preprocess_image(image):
    # Convertendo a imagem para escala de cinza
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Aplicando um filtro para reduzir ruídos e melhorar o contraste
    processed_image = cv2.GaussianBlur(gray, (5, 5), 0)
    return processed_image

# Função para tentar extrair os dados
def extract_data(text):
    # Expressões regulares para capturar os dados desejados
    data = {
        "Motivo da apreensão": None,
        "Cidade": None,
        "Pátio de apreensão": None,
        "Endereço do pátio": None,
        "Observações": None,
        "Órgão de apreensão": None
    }

    # Buscar o motivo da apreensão
    motivo_pattern = re.compile(r"(Motivo da apreensão|Motivo:\s*|\bMotivo\b)[\s:]*([^\n]+)")
    match = motivo_pattern.search(text)
    if match:
        data["Motivo da apreensão"] = match.group(2).strip()

    # Buscar a cidade
    cidade_pattern = re.compile(r"(Cidade|Município):?[\s:]*([^\n]+)")
    match = cidade_pattern.search(text)
    if match:
        data["Cidade"] = match.group(2).strip()

    # Buscar o pátio de apreensão
    patio_pattern = re.compile(r"(Pátio de apreensão|Pátio):?[\s:]*([^\n]+)")
    match = patio_pattern.search(text)
    if match:
        data["Pátio de apreensão"] = match.group(2).strip()

    # Buscar o endereço do pátio
    endereco_pattern = re.compile(r"(Endereço do pátio|Endereço):?[\s:]*([^\n]+)")
    match = endereco_pattern.search(text)
    if match:
        data["Endereço do pátio"] = match.group(2).strip()

    # Buscar as observações
    observacoes_pattern = re.compile(r"(Observações|Observação):?[\s:]*([^\n]+)")
    match = observacoes_pattern.search(text)
    if match:
        data["Observações"] = match.group(2).strip()

    # Buscar o órgão de apreensão
    orgao_pattern = re.compile(r"(Órgão de apreensão|Órgão):?[\s:]*([^\n]+)")
    match = orgao_pattern.search(text)
    if match:
        data["Órgão de apreensão"] = match.group(2).strip()

    return data

# Função principal
def process_image(image_path):
    # Carregar a imagem usando OpenCV
    imagem = cv2.imread(image_path)

    # Verificar se a imagem foi carregada corretamente
    if imagem is None:
        print(f"Erro: A imagem {image_path} não foi carregada corretamente.")
        return False, None

    # Pré-processar a imagem para melhorar a qualidade do OCR
    processed_image = preprocess_image(imagem)

    # Converter a imagem do OpenCV (numpy array) para um objeto PIL
    pil_image = Image.fromarray(processed_image)

    # Usar pytesseract para extrair texto da imagem
    texto = pytesseract.image_to_string(pil_image, lang='por')  # Definir o idioma como português

    # Verificar se o texto extraído contém dados suficientes
    if not texto.strip():
        return False, None  # Caso o OCR não consiga ler nada

    # Extrair os dados da string de texto
    extracted_data = extract_data(texto)

    # Verificar se os dados essenciais foram extraídos corretamente
    if any(value is None for value in extracted_data.values()):
        return False, None  # Se faltar algum dado importante, retorna False

    # Salvar os dados em um arquivo JSON
    with open('dados_apreensao.json', 'w', encoding='utf-8') as f:
        json.dump(extracted_data, f, ensure_ascii=False, indent=4)

    return True, extracted_data

# Função para carregar imagem diretamente (sem upload)
def main():
    image_path = input("Digite o caminho da imagem para processamento: ")
    
    # Verificar se o caminho da imagem é válido
    if not os.path.exists(image_path):
        print(f"Erro: O arquivo {image_path} não existe.")
        return

    # Processar a imagem
    status, data = process_image(image_path)

    # Imprimir o status e os dados extraídos
    if status:
        print("Extração bem-sucedida. Dados:", data)
    else:
        print("Falha na extração de dados.")

# Executa a função principal
if __name__ == "__main__":
    main()
